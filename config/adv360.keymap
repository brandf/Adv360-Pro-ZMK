#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

#define U_PST &kp LC(V)
#define U_CPY &kp LC(C)
#define U_CUT &kp LC(X)
#define U_UND &kp LC(Z)
#define U_RDO &kp LC(LS(Z))
#define U_SAVE &kp LC(S)
#define U_SAVEAS &kp LC(LS(S))
#define U_OPEN &kp LC(O)
#define U_FIND &kp LC(F)
#define U_REPLACE &kp LC(H)
#define U_SCRNSHT &kp LG(LS(S))
#define U_NEXTAPP &kp LA(TAB)
#define U_ALLAPPS &kp LG(TAB)
#define U_QUICKOPEN &kp LC(P)


/ {

  keymap {
    compatible = "zmk,keymap";
    main_layer {
      bindings = <
/* ╭────────────────┬────────────────┬────────────────┬────────────────┬────────────────┬────────────────┬────────────────╮                                                                                 ╭────────────────┬────────────────┬────────────────┬────────────────┬────────────────┬────────────────┬────────────────╮  */
        &kp ESC           U_SAVE           U_FIND          &kp CARET         &kp AT        &kp PERCENT         &kp DQT                                                                                         &kp DOLLAR         &kp STAR         &slashes          &squares       &squiggles         &parens          &angles
/* ├────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┤                                                                                 ├────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┤  */
       &kp TILDE          U_OPEN           &kp G            &kp M            &kp P          &kp EQUAL          &kp SQT                                                                                           &kp HASH         &kp PLUS          &kp MINUS         &kp K            &kp V            &kp Z           &kp TAB
/* ├────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┤   ╭────────────────┬────────────────╮     ╭────────────────┬────────────────╮   ├────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┤  */
       &kp LGUI           &kp R            &kp S            &kp N            &kp D           &kp B            &kp UNDER            &kp BSPC          U_CUT                 U_SCRNSHT        &kp ENTER            &kp EXCL          &kp A             &kp E            &kp I            &kp H          &kp SEMI         &kp COLON
/* ├────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────╯   ╰────────────────┼────────────────┤     ├────────────────┼────────────────╯   ╰────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┤  */
       &kp LSHFT          &kp X            &kp F            &kp L            &kp C           &kp W                                                   U_CPY                 U_NEXTAPP                                           &kp QUESTION          &kp U            &kp O            &kp Y            &kp J          &kp RSHFT
/* ├────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────╯   ╭────────────────┬────────────────┼────────────────┤     ├────────────────┼────────────────┬────────────────╮   ╰────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┤  */
       &kp LCTRL        &kp LALT        &kp EXCL         &kp AMPS         &kp PIPE                                 &sl 1           &kp T             U_PST                  U_UND           &kp SPACE           &sl 1                                &kp DOT          &kp Q          &kp COMMA        &kp RALT         &kp RCTRL
/* ╰────────────────┴────────────────┴────────────────┴────────────────┴────────────────╯                    ╰────────────────┴────────────────┴────────────────╯     ╰────────────────┴────────────────┴────────────────╯                    ╰────────────────┴────────────────┴────────────────┴────────────────┴────────────────╯  */
      >;
    };
    other_layer {
      bindings = <
/* ╭────────────────┬────────────────┬────────────────┬────────────────┬────────────────┬────────────────┬────────────────╮                                                                                 ╭────────────────┬────────────────┬────────────────┬────────────────┬────────────────┬────────────────┬────────────────╮  */
        &trans           U_SAVEAS          U_REPLACE         &trans           &trans           &trans       &macro_dquotes                                                                                        &none           &none             &none             &none           &none            &none          &bt BT_CLR
/* ├────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┤                                                                                 ├────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┤  */
       &kp GRAVE        U_QUICKOPEN        &num_fun_7       &num_fun_8       &num_fun_9      &num_fun_12    &macro_quotes                                                                                         &none          &kp PG_UP         &kp HOME          &kp UP          &kp END           &none          &bl BL_TOG
/* ├────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┤   ╭────────────────┬────────────────╮     ╭────────────────┬────────────────╮   ├────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┤  */
        &trans            &none            &num_fun_4       &num_fun_5       &num_fun_6      &num_fun_11     &bootloader            &kp DEL          &trans                 &trans          &trans             &bootloader       &kp PG_DN         &kp LEFT          &kp DOWN        &kp RIGHT         &none            &none
/* ├────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────╯   ╰────────────────┼────────────────┤     ├────────────────┼────────────────╯   ╰────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┤  */
        &trans            &none            &num_fun_1       &num_fun_2       &num_fun_3      &num_fun_10                                             &trans                U_ALLAPPS                                              &none             &none             &none           &none            &none            &trans
/* ├────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────╯   ╭────────────────┬────────────────┼────────────────┤     ├────────────────┼────────────────┬────────────────╮   ╰────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┤  */
        &trans            &trans           &trans           &trans           &trans                                &trans           &trans           &trans                 U_RDO           &trans           &trans                                 &none             &none           &none            &trans           &trans
/* ╰────────────────┴────────────────┴────────────────┴────────────────┴────────────────╯                    ╰────────────────┴────────────────┴────────────────╯     ╰────────────────┴────────────────┴────────────────╯                    ╰────────────────┴────────────────┴────────────────┴────────────────┴────────────────╯  */
      >;
    };
  };
  behaviors {
      macro_quotes: macro_quotes {
        compatible = "zmk,behavior-macro";
        label = "macro_quotes";
        #binding-cells = <0>;
        bindings = <&kp SQT>, <&kp SQT>, <&kp LEFT>;
      };
      macro_dquotes: macro_dquotes {
        compatible = "zmk,behavior-macro";
        label = "macro_dquotes";
        #binding-cells = <0>;
        bindings = <&kp DQT>, <&kp DQT>, <&kp LEFT>;
      };
      macro_squiggles: macro_squiggles {
        compatible = "zmk,behavior-macro";
        label = "macro_squiggles";
        #binding-cells = <0>;
        bindings = <&kp LBRC>, <&kp RBRC>, <&kp LEFT>;
      };
      macro_parens: macro_parens {
        compatible = "zmk,behavior-macro";
        label = "macro_parens";
        #binding-cells = <0>;
        bindings = <&kp LPAR>, <&kp RPAR>, <&kp LEFT>;
      };
      macro_brackets: macro_brackets {
        compatible = "zmk,behavior-macro";
        label = "macro_brackets";
        #binding-cells = <0>;
        bindings = <&kp LBKT>, <&kp RBKT>, <&kp LEFT>;
      };
      slashes: slashes {
        compatible = "zmk,behavior-mod-morph";
        label = "slashes";
        #binding-cells = <0>;
        bindings = <&kp KP_SLASH>, <&kp BACKSLASH>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };
      squares: squares {
        compatible = "zmk,behavior-mod-morph";
        label = "squares";
        #binding-cells = <0>;
        bindings = <&kp LBKT>, <&macro_brackets>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };
      squiggles: squiggles {
        compatible = "zmk,behavior-mod-morph";
        label = "squiggles";
        #binding-cells = <0>;
        bindings = <&kp LBRC>, <&macro_squiggles>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };
      parens: parens {
        compatible = "zmk,behavior-mod-morph";
        label = "parens";
        #binding-cells = <0>;
        bindings = <&kp LPAR>, <&macro_parens>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };
      angles: angles {
        compatible = "zmk,behavior-mod-morph";
        label = "angles";
        #binding-cells = <0>;
        bindings = <&kp LT>, <&kp GT>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };
      num_fun_1: num_fun_1 {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp N1>, <&kp F1>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };
      num_fun_2: num_fun_2 {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp N2>, <&kp F2>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };
      num_fun_3: num_fun_3 {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp N3>, <&kp F3>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };
      num_fun_4: num_fun_4 {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp N4>, <&kp F4>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };
      num_fun_5: num_fun_5 {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp N5>, <&kp F5>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };
      num_fun_6: num_fun_6 {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp N6>, <&kp F6>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };
      num_fun_7: num_fun_7 {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp N7>, <&kp F7>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };
      num_fun_8: num_fun_8 {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp N8>, <&kp F8>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };
      num_fun_9: num_fun_9 {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp N9>, <&kp F9>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };
      num_fun_10: num_fun_10 {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp N0>, <&kp F10>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };
      num_fun_11: num_fun_11 {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp N1>, <&kp F11>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };
      num_fun_12: num_fun_12 {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp N2>, <&kp F12>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };
  };
};
